============================================== System specifications ============================================== 

Dynamic lighting
- In some levels everything could be dark, if no light source entity nearby etc.
- Point lights can be entities?

Collision
- Have some sort of edge pool where tiles are combinen into larger objects
  - This reduces the number of collision that need to be detected.
  - Helps with dynamic lighting calculations also.

UI
- Used for inventory, skill trees map, etc.
- Add ingame menu
  - Use to control sound, music, load from checkpoint etc.
- Editor
  - Undo/redo in editor (could use ctrl+z)

Saving/loading game
- Create/load save files
- Just modify player data in lvl as a starter

Dialogue tree
- Create a specific datastructure for this
- Store npc and dialogues in json file

Sound component
- If player move, set CSound -> active = true
  - if active calculate area around the player and check if enemy entities inside the area
    - set enities inside the are to agressive
  - double the area if running (walking normal)

Shaders
- Use entity effects such as taking damage etc.

Testing
- Use doctest for unit testing
- Important to test collision and pathfinding

Multithreading
- Not a priority right now

Build
- Start using e.g. CMake

Memory pooling for CPU cache coherent code
- entity-memory-pool.hpp is a skeleton for this
- No need to use shared pointers
